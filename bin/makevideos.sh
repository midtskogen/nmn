#!/bin/bash

# makevideos.sh <video dir> <start (unix time)> <length (seconds)> <output name> [<start x,y> <end x,y> <recalibrate> <labels>]
export OMP_NUM_THREADS=4

let start=$2-6
let len=$3+6

name=$4
jpg=$name.jpg
jpggrid=$name-grid.jpg
jpgmask=$name-mask.jpg
mp4grid=$name-grid.mp4
gnomonic=$name-gnomonic.jpg
gnomonicgrid=$name-gnomonic-grid.jpg
gnomoniclabels=$name-gnomonic-labels.jpg
gnomonicgriduncorr=$name-gnomonic-grid-uncorr.jpg
gnomoniclabelsuncorr=$name-gnomonic-labels-uncorr.jpg
gnomonicmask=$name-gnomonic-mask.jpg
gnomonicmp4=$name-gnomonic.mp4
gnomonicgridmp4=$name-gnomonic-grid.mp4
full=$name.mp4
tmpdir=$(mktemp -d)

echo Using temporary directory $tmpdir

    base64 -d >sbsdnb.png << ENDOFFILE
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
1FLGVpbwhLf8apkYBFR+FRR0fMiX/tC+OwkVtXAsHQlc9O1GYRjkTyapn0rdx5EYVCYMh7EsKIBz
6JXH6IRZ3cKnh+9WR1/ZGmNklascVSgsKaSQL2jYpgWqklIkaZ/e1GHqI1SjMv1DN+hx1RRyZEt1
Mur46wHNcknNJKUqS711jEZrpPpppS5ULNDyRhH1UKZi2qU9qm2dNOs3ggDSeh0bvI46zZykLIVU
cKh/vyizFZ78/7/42h5r5TMcAAATPGVYSWZJSSoACAAAAAoAAAEEAAEAAACAAAAAAQEEAAEAAABq
AAAAAgEDAAMAAACGAAAAEgEDAAEAAAABAAAAGgEFAAEAAACMAAAAGwEFAAEAAACUAAAAKAEDAAEA
AAADAAAAMQECAA0AAACcAAAAMgECABQAAACqAAAAaYcEAAEAAAC+AAAA0AAAAAgACAAIABwAAAAB
AAAAHAAAAAEAAABHSU1QIDIuMTAuMzQAADIwMjQ6MDU6MjEgMjE6MjY6MjAAAQABoAMAAQAAAAEA
AAAAAAAACQD+AAQAAQAAAAEAAAAAAQQAAQAAAAABAAABAQQAAQAAANQAAAACAQMAAwAAAEIBAAAD
AQMAAQAAAAYAAAAGAQMAAQAAAAYAAAAVAQMAAQAAAAMAAAABAgQAAQAAAEgBAAACAgQAAQAAAPQR
AAAAAAAACAAIAAgA/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsL
DBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgN
DRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/
wAARCADUAQADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcY
GRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKT
lJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP0
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
RVh0ZXhpZjp0aHVtYm5haWw6Qml0c1BlclNhbXBsZQA4LCA4LCA4IBv0UwAAABx0RVh0ZXhpZjp0
aHVtYm5haWw6Q29tcHJlc3Npb24ANvllcFcAAAAedEVYdGV4aWY6dGh1bWJuYWlsOkltYWdlTGVu
Z3RoADIxMjNxMR4AAAAddEVYdGV4aWY6dGh1bWJuYWlsOkltYWdlV2lkdGgAMjU2iAb6FAAAACh0
RVh0ZXhpZjp0aHVtYm5haWw6SlBFR0ludGVyY2hhbmdlRm9ybWF0ADMyOJfH4cEAAAAvdEVYdGV4
aWY6dGh1bWJuYWlsOkpQRUdJbnRlcmNoYW5nZUZvcm1hdExlbmd0aAA0NTk2QdNpPgAAACp0RVh0
ZXhpZjp0aHVtYm5haWw6UGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvbgA2EhWKGgAAACB0RVh0ZXhp
Zjp0aHVtYm5haWw6U2FtcGxlc1BlclBpeGVsADPh181aAAAAG3RFWHRpY2M6Y29weXJpZ2h0AFB1
YmxpYyBEb21haW62kTFbAAAAOXRFWHRpY2M6ZGVzY3JpcHRpb24AR0lNUCBidWlsdC1pbiBENjUg
R3JheXNjYWxlIHdpdGggc1JHQiBUUkOsA0bPAAAAFXRFWHRpY2M6bWFudWZhY3R1cmVyAEdJTVBM
npDKAAAAJXRFWHRpY2M6bW9kZWwARDY1IEdyYXlzY2FsZSB3aXRoIHNSR0IgVFJDeZ10XQAAAAl0
RVh0dW5rbm93bgAx2iFVfAAAAABJRU5ErkJggg==
ENDOFFILE

    base64 -d >nmn.png << ENDOFFILE
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
ENDOFFILE

if [ -e metdetect.conf ]; then conf=metdetect.conf; else
    conf=$1/metdetect.conf
    cp $conf metdetect.conf
fi

model="$(sed 's/.*\(-M \w\+\).*/\1/' < $conf)"
if [ "$model" == "$(cat $conf)" ]; then model=; fi
if [ "$model" == "-M IMX291SD" ]; then model="-M IMX291HD"; fi
if [ "$model" == "-M IMX307SD" ]; then model="-M IMX307HD"; fi
    
function refraction {
    #echo "import math; print(round($1-0.016/(math.tan(math.pi/180*($1 + (7.31/($1 + 4.4))))),2))" | python
    echo "import math; print(round($1-0.006/(math.tan(math.pi/180*($1 + (7.31/($1 + 4.4))))),2))" | python
}

scale=$(grep ^p $1/lens.pto | sed s/w// | awk '{print $3/360}')

function search {
    let _start=$2+60
    for i in 1 2 3; do
	for j in 1 2 3; do
	    _file=$1/$(date +%Y%m%d/%H/$3_%M.mp4 -u -d @$_start)
	    if [ -e $_file ]; then break; fi
	    let _start=_start-60
	done
	echo $_file
	let _start=_start-60
    done
}
read full3 full2 full1 <<< $(echo $(search $1 $start full))

if [ ! -e "$full1" ] || [ ! -e "$full2" ] || [ ! -e "$full3" ]; then
    echo Videos not found
    exit
fi

ts=$(~/bin/timestamp $model $full1 | tail -n1)

let skip=$start-$ts-4
let len=$len+8

rate=$(ffmpeg -nostdin -i $full1 2>&1 | grep fps | sed 's/fps.*//;s/.*,//')

ts=$(~/bin/timestamp $model $full1 | tail -n1)
if [ $ts -eq 0 ]; then
date=$(echo "$full1" | grep -oP '\d{2}')
ts=$(date -u +%s -d "${date:0:2}${date:3:2}-${date:6:2}-${date:9:2} ${date:12:2}:${date:15:2}:00")
fi

day=$(date +"%Y%m%d" -d @$ts)
let skip=$start-$ts-4
rate=$(ffmpeg -nostdin -i $full1 2>&1 | grep fps | sed 's/fps.*//;s/.*,//')

echo -n "Generating $full ... "
echo file $full1 > filelist.txt
echo file $full2 >> filelist.txt
echo file $full3 >> filelist.txt
ffmpeg -protocol_whitelist fd,file,pipe -loglevel quiet -safe 0 -r $rate -f concat -i filelist.txt -c copy -ss $skip -t $len -y $full
rm -f filelist.txt

ts=$(~/bin/timestamp $model $full | tail -n1)
if [ $ts -eq 0 ]; then
date=$(echo "$full" | grep -oP '\d{2}')
ts=$(date -u +%s -d "${date:0:2}${date:3:2}-${date:6:2}-${date:9:2} ${date:12:2}:${date:15:2}:00")
fi

let ts2=ts+$len
echo $(date +"%H:%M:%S" -u -d @$ts)" - "$(date +"%H:%M:%S" -u -d @$(($ts+$len)))" ... done"

if [ -e grid.png ]; then grid=grid.png; else
    grid=$1/grid.png
    for i in $(echo $1/grid-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].png | sort); do
	if [ ! -e "$i" ]; then break; fi
	if [ $day -ge $(echo $i | sed 's/.*grid-//;s/\.png//') ]; then
	    grid=$i
	    continue;
	fi
    done
    cp $grid grid.png
fi

if [ -e lens.pto ]; then lens=lens.pto; else
    lens=$1/lens.pto
    for i in $(echo $1/lens-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].pto | sort); do
	if [ ! -e "$i" ]; then break; fi
	if [ $day -ge $(echo $i | sed 's/.*lens-//;s/\.pto//') ]; then
	    lens=$i
	    continue;
	fi
    done
    cp $lens lens.pto
fi

if [ -e mask.jpg ]; then mask=mask.jpg; else
    mask=$1/mask.jpg
    for i in $(echo $1/mask-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].jpg | sort); do
	if [ ! -e "$i" ]; then break; fi
	if [ $day -ge $(echo $i | sed 's/.*mask-//;s/\.jpg//') ]; then
	    mask=$i
	    continue;
	fi
    done
    cp $mask mask.jpg
fi

cp /etc/meteor.cfg .

echo "Using $grid, $lens and $mask"

# Early exit
begin=$(grep "coordinates =" event.txt | awk '{print $3}')
end=$(grep "coordinates =" event.txt | awk '{print $NF}')
echo "Start: "$(echo $begin | sed 's/,/ /')" End: "$(echo $end | sed 's/,/ /')
exit


let start=$2-$ts
let ts=ts+$start
let ts2=ts+$len/2
let ts3=ts+$len-1

echo -n "Generating labels ... "
echo convert -pointsize 12 $(~/bin/brightstar.py $ts2 $lens 2> /dev/null | sed 's/[(),]//g;s/'\''//g' | awk '{x=$1; y=$2; az=$3; alt=$4; $1=$2=$3=$4=""; sub(/ */, ""); printf("-stroke white -fill none -draw \"circle %f,%f %f,%f\" -stroke none -fill white -annotate +%f+%f \"%s [%.2f %.2f]\"\n", x, y, x+7, y, x+11, y-4, $0, az, alt)}') $grid $tmpdir/grid-labels.png | bash
convert -size $(identify $grid | awk '{print $3}') xc:none $tmpdir/empty.png
echo done

echo -n "Generating $mp4grid ... "
if [[ $mp4grid -nt event.txt ]]; then echo "not needed"; else
    convert -depth 8 $tmpdir/grid-labels.png -normalize +level 0,30% tmp.png
    ffmpeg -loglevel quiet -c:v h264 -i $full -i tmp.png -filter_complex overlay -c:v libx264 -y $mp4grid
    rm -f tmp.png
    echo done
fi

read fullwidth fullheight <<< $(ffmpeg -nostdin -i $full 2>&1 |egrep -o '[0-9][0-9]+x[0-9]+' | sed 's/x/ /')

echo -n "Generating $jpg ... "
if [[ $jpg -nt event.txt ]]; then echo "not needed"; else
    ffmpeg -c:v h264 -nostdin -loglevel quiet -vsync 0 -i $full -pix_fmt yuv420p -f rawvideo - | ~/bin/stack $fullwidth $fullheight > $jpg
    echo done
fi

if [ -e $mask ]; then
    echo -n "Generating $jpgmask ... "
    if [[ $jpgmask -nt event.txt ]]; then echo "not needed"; else
	convert -geometry $(identify $jpg | sed 's/.*\( [0-9]*x[0-9]* \).*/\1/') -composite -compose multiply $jpg $mask $jpgmask
	echo done
    fi
fi

echo -n "Generating $jpggrid ... "
if [[ $jpggrid -nt event.txt ]]; then echo "not needed"; else
    composite -blend 60 $jpg $tmpdir/grid-labels.png $jpggrid
    echo done
fi

function reproject {
    j=${1%.*}
    nona -z DEFLATE -o $tmpdir/$j- -m TIFF_m gnomonic_mp4.pto $1
    convert $tmpdir/$j-0000.tif $1
    rm $tmpdir/$j-0000.tif
}


if [ "$5" != "" ] && [ "$6" != "" ]; then
    # lens.pto: fisheye -> equirectangular
    # gnomonic.pto: fisheye -> gnomonic
    # gnomonic_grid.pto: gnomonic -> equirectangular

    let ts2=$2+$len/2

    read startx starty <<< $(echo $5 | sed 's/,/ /')
    read endx endy <<< $(echo $6 | sed 's/,/ /')

    read startaz2 startalt2 <<< $(echo $startx" "$starty | pano_trafo $lens 0 | tail -n1)
    read endaz2 endalt2 <<< $(echo $endx" "$endy | pano_trafo $lens 0 | tail -n1)
    read startaz startalt <<< $(echo "$startaz2 $startalt2" | awk '{print $1/'$scale'" "90-$2/'$scale'}')
    read endaz endalt <<< $(echo "$endaz2 $endalt2" | awk '{print $1/'$scale'" "90-$2/'$scale'}')
	
    echo -n "Generating $gnomonic ... "
    if [[ $gnomonic -nt event.txt ]]; then echo "not needed"; else
	~/bin/reproject.py -f 45 --width 1920 --height 2560 -o gnomonic.pto -g gnomonic_grid.pto -e $endaz,$endalt $lens $startaz,$startalt
	nona -z DEFLATE -o $name-gnomonic -m TIFF_m gnomonic.pto $jpg
	convert $name-gnomonic0000.tif -alpha off $tmpdir/tmp2.png
	composite -gravity NorthWest -geometry +16+16 nmn.png  $tmpdir/tmp2.png $tmpdir/tmp.png
	composite -gravity NorthEast -geometry +16+16 sbsdnb.png $tmpdir/tmp.png $gnomonic
	rm -f $tmpdir/tmp2.png
	rm $name-gnomonic0000.tif
	echo done
    fi

    if [ -e $mask ]; then
	echo -n "Generating $gnomonicmask ... "
	if [[ $gnomonicmask -nt event.txt ]]; then echo "not needed"; else
	    nona -z DEFLATE -o $name-gnomonicmask -m TIFF_m gnomonic.pto $jpgmask
	    convert $name-gnomonicmask0000.tif $gnomonicmask
	    rm $name-gnomonicmask0000.tif
	    echo done
	fi
    fi

    cp -a gnomonic_grid.pto gnomonic_corr_grid.pto
    if [ "$7" == "" ] || [ "$7" == "1" ]; then
	echo -n "Recalibrating gnomonic view ... "
	~/bin/recalibrate.py $ts2 gnomonic_grid.pto $gnomonic gnomonic_corr_grid.pto
	echo done
    fi

    echo -n "Generating gnomonic grid and labels ... "
    if [[ gnomonic_corr_grid.png -nt event.txt ]]; then echo -n "grid not needed ... "; else
	~/bin/drawgrid.py gnomonic_corr_grid.pto gnomonic_corr_grid.png
	convert gnomonic_corr_grid.png -gravity SouthWest -stroke none  -fill white -pointsize 18 -draw "text 16,16 '$8'" gnomonic_corr_grid.png
    fi
    
    read startx starty <<< $(echo $startaz2 $startalt2 | pano_trafo -r gnomonic_corr_grid.pto 0 | tail -n1)
    read endx endy <<< $(echo $endaz2 $endalt2 | pano_trafo -r gnomonic_corr_grid.pto 0 | tail -n1)

    if [ -e $mask ]; then
	points=$(echo "~/bin/refinetrack.py $gnomonicmask $startx,$starty $endx,$endy" | bash)
    else
	points=$(echo "~/bin/refinetrack.py $gnomonic $startx,$starty $endx,$endy" | bash)
    fi

    if [ $? -ne 0 ]; then
        exit -1
    fi

    read startaz startalt endaz endalt <<< $(echo $(echo $points | tr -s ', ' ' ' | pano_trafo gnomonic_corr_grid.pto 0 | tail -n2 | awk '{printf("%.2f %.2f\n", $1/'$scale', 90-$2/'$scale')}'))
    startalt=$(refraction $startalt)
    endalt=$(refraction $endalt)
    crosses=$(echo $points | tr -s ' ' '\n' | awk -F, '{ print "line " $1-16 "," $2-16 " " $1-4 "," $2-4 "line " $1+4 "," $2+4 " " $1+16 "," $2+16 "line " $1+16 "," $2-16 " " $1+4 "," $2-4 "line " $1-4 "," $2+4 " " $1-16 "," $2+16  }' -)

    text=$(echo "$points $startaz $startalt $endaz $endalt" | tr -s ', ' ' ' | awk '{print "-annotate +"$1+10"+"$2" \"["$5" "$6"]\" -annotate +"$3+10"+"$4" \"["$7" "$8"]\"" }')
    corr_startaz=$startaz
    corr_startalt=$startalt
    corr_endaz=$endaz
    corr_endalt=$endalt
    convert -size $(identify $gnomonic | awk '{print $3}') xc:none $tmpdir/empty.png
    echo convert -pointsize 12 -strokewidth 2 -draw \"fill none stroke white $crosses\" $text $(~/bin/brightstar.py $ts2 gnomonic_corr_grid.pto 2> /dev/null | sed 's/[(),]//g;s/'\''//g' | awk '{x=$1; y=$2; az=$3; alt=$4; $1=$2=$3=$4=""; sub(/ */, ""); printf("-stroke white -fill none -draw \"circle %f,%f %f,%f\" -stroke none -fill white -annotate +%f+%f \"%s [%.2f %.2f]\"\n", x, y, x+7, y, x+11, y-4, $0, az, alt)}') gnomonic_corr_grid.png $tmpdir/grid-labels.png | bash
    echo convert -pointsize 12 -strokewidth 2 -draw \"fill none stroke white $crosses\" $text $(~/bin/brightstar.py $ts2 gnomonic_corr_grid.pto 2> /dev/null | sed 's/[(),]//g;s/'\''//g' | awk '{x=$1; y=$2; az=$3; alt=$4; $1=$2=$3=$4=""; sub(/ */, ""); printf("-stroke white -fill none -draw \"circle %f,%f %f,%f\" -stroke none -fill white -annotate +%f+%f \"%s [%.2f %.2f]\"\n", x, y, x+7, y, x+11, y-4, $0, az, alt)}') $tmpdir/empty.png $tmpdir/labels.png | bash

    if [ "$7" == "" ] || [ "$7" == "1" ]; then
	if [[ gnomonic_grid.png -nt event.txt ]]; then echo -n "gnonomic_grid not needed ... "; else
	    ~/bin/drawgrid.py gnomonic_grid.pto gnomonic_grid.png
	    convert gnomonic_grid.png -gravity SouthWest -stroke none  -fill white -pointsize 18 -draw "text 16,16 '$8'" gnomonic_grid.png
	fi

	read startx starty <<< $(echo $startaz2 $startalt2 | pano_trafo -r gnomonic_grid.pto 0 | tail -n1)
	read endx endy <<< $(echo $endaz2 $endalt2 | pano_trafo -r gnomonic_grid.pto 0 | tail -n1)

	if [ -e $mask ]; then
	    points=$(echo "~/bin/refinetrack.py $gnomonicmask $startx,$starty $endx,$endy" | bash)
	else
	    points=$(echo "~/bin/refinetrack.py $gnomonic $startx,$starty $endx,$endy" | bash)
	fi
	read startaz startalt endaz endalt <<< $(echo $(echo $points | tr -s ', ' ' ' | pano_trafo gnomonic_grid.pto 0 | tail -n2 | awk '{printf("%.2f %.2f\n", $1/'$scale', 90-$2/'$scale')}'))
	startalt=$(refraction $startalt)
	endalt=$(refraction $endalt)
	crosses=$(echo $points | tr -s ' ' '\n' | awk -F, '{ print "line " $1-16 "," $2-16 " " $1-4 "," $2-4" line " $1+4 "," $2+4 " " $1+16 "," $2+16" line " $1+16 "," $2-16 " " $1+4 "," $2-4 "line " $1-4 "," $2+4 " " $1-16 "," $2+16  }' -)
	text=$(echo "$points $startaz $startalt $endaz $endalt" | tr -s ', ' ' ' | awk '{print "-annotate +"$1+10"+"$2" \"["$5" "$6"]\" -annotate +"$3+10"+"$4" \"["$7" "$8"]\"" }')
	
	echo convert -pointsize 12 -strokewidth 2 -draw \"fill none stroke white $crosses\" $text $(~/bin/brightstar.py $ts2 gnomonic_grid.pto 2> /dev/null | sed 's/[(),]//g;s/'\''//g' | awk '{x=$1; y=$2; az=$3; alt=$4; $1=$2=$3=$4=""; sub(/ */, ""); printf("-stroke white -fill none -draw \"circle %f,%f %f,%f\" -stroke none -fill white -annotate +%f+%f \"%s [%.2f %.2f]\"\n", x, y, x+7, y, x+11, y-4, $0, az, alt)}') gnomonic_grid.png $tmpdir/grid-labels-uncorr.png | bash
	echo convert -pointsize 12 -strokewidth 2 -draw \"fill none stroke white $crosses\" $text $(~/bin/brightstar.py $ts2 gnomonic_grid.pto 2> /dev/null | sed 's/[(),]//g;s/'\''//g' | awk '{x=$1; y=$2; az=$3; alt=$4; $1=$2=$3=$4=""; sub(/ */, ""); printf("-stroke white -fill none -draw \"circle %f,%f %f,%f\" -stroke none -fill white -annotate +%f+%f \"%s [%.2f %.2f]\"\n", x, y, x+7, y, x+11, y-4, $0, az, alt)}') $tmpdir/empty.png $tmpdir/labels-uncorr.png | bash
    fi

    rm $tmpdir/empty.png
    echo done

    echo -n "Generating $gnomonicgrid ... "
    if [[ $gnomonicgrid -nt event.txt ]]; then echo "not needed"; else
	composite -blend 60 $gnomonic $tmpdir/grid-labels.png $gnomonicgrid
	rm $tmpdir/grid-labels.png
	echo done
    fi

    if [ "$7" == "" ] || [ "$7" == "1" ]; then
	echo -n "Generating $gnomonicgriduncorr ... "
	if [[ $gnomonicgriduncorr -nt event.txt ]]; then echo "not needed"; else
	    composite -blend 60 $gnomonic $tmpdir/grid-labels-uncorr.png $gnomonicgriduncorr
	    rm $tmpdir/grid-labels-uncorr.png
	    echo done
	fi
    fi

    echo -n "Generating $gnomoniclabels ... "
    if [[ $gnomoniclabels -nt event.txt ]]; then echo "not needed"; else
	composite -blend 60 $gnomonic $tmpdir/labels.png $gnomoniclabels
	echo done
    fi
    rm $tmpdir/labels.png

    if [ "$7" == "" ] || [ "$7" == "1" ]; then
	echo -n "Generating $gnomoniclabelsuncorr ... "
	if [[ $gnomoniclabelsuncorr -nt event.txt ]]; then echo "not needed"; else
	    composite -blend 60 $gnomonic $tmpdir/labels-uncorr.png $gnomoniclabelsuncorr
	    echo done
	fi
	rm $tmpdir/labels-uncorr.png
    fi


    echo -n "Generating $gnomonicmp4 ... "
    if [[ $gnomonicmp4 -nt event.txt ]]; then echo "not needed"; else
	ffmpeg -c:v h264 -nostdin -loglevel quiet -i $full -vsync 0 -f image2 $tmpdir/frame-%3d.png
	pano_modify --canvas=1920x1080 -o gnomonic_mp4.pto gnomonic.pto > /dev/null
	let start2=$2-2
	let end2=$2+$3+2
    
	for i in $tmpdir/frame-*.png; do
	    ts=$(~/bin/timestamp $model $i)
	    if [ "$ts" -lt "$start2" ] || [ "$ts" -gt "$end2" ]; then rm -f $i; fi
	done

	export -f reproject
	ls -1 $tmpdir/frame-*.png | parallel reproject {}

	c=0; for i in $tmpdir/frame-*.png; do mv $i $tmpdir/frame-$(printf "%03d" $c).png; let c=c+1; done
    
	ffmpeg -loglevel quiet -r $rate -i $tmpdir/frame-%03d.png -c:v libx264 -tune zerolatency -refs 1 -qp 18 -threads 1 -r $rate -y -pix_fmt yuv420p $gnomonicmp4
	tmp=$(tempfile).h264
	fps=$(ffmpeg -i $gnomonicmp4 2>&1 | grep fps | sed s/fps.*// | awk '{ printf("%d", $NF+0.5) }')
	MP4Box -raw 1 $gnomonicmp4 -out $tmp > /dev/null
	rm -f $gnomonicmp4
	MP4Box $gnomonicmp4 -add $tmp -fps $fps > /dev/null
	rm -f $tmp

	rm $tmpdir/frame-*.png
	echo done
    fi

    echo -n "Generating $gnomonicgridmp4 ... "
    if [[ $gnomonicgridmp4 -nt event.txt ]]; then echo "not needed"; else
	convert -depth 8 -crop 1920x1080+0+740 gnomonic_corr_grid.png -normalize +level 0,30% tmp.png
	ffmpeg -loglevel quiet -c:v h264 -i $gnomonicmp4 -i tmp.png -filter_complex overlay -c:v libx264 -y $gnomonicgridmp4
	rm tmp.png gnomonic_corr_grid.png
	echo done
    fi
fi

composite -gravity NorthWest -geometry +16+16 nmn.png $jpg $tmpdir/tmp.png
composite -gravity NorthEast -geometry +16+16 sbsdnb.png $tmpdir/tmp.png $jpg

rm -f nmn.png sbsdnb.png
rm -rf $tmpdir

if [ "$5" != "" ] && [ "$6" != "" ]; then
    echo "Start: $corr_startaz $corr_startalt  End: $corr_endaz $corr_endalt"
fi
